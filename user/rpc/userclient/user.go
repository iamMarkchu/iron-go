// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

//go:generate mockgen -destination ./user_mock.go -package userclient -source $GOFILE

package userclient

import (
	"context"

	"iron-go/user/rpc/user"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	GetUserInfoReq  = user.GetUserInfoReq
	GetUserInfoResp = user.GetUserInfoResp
	Request         = user.Request
	Response        = user.Response
	RegisterReq     = user.RegisterReq
	RegistreResp    = user.RegistreResp
	LoginReq        = user.LoginReq
	LoginResp       = user.LoginResp

	User interface {
		Ping(ctx context.Context, in *Request) (*Response, error)
		Register(ctx context.Context, in *RegisterReq) (*RegistreResp, error)
		Login(ctx context.Context, in *LoginReq) (*LoginResp, error)
		GetUserInfo(ctx context.Context, in *GetUserInfoReq) (*GetUserInfoResp, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) Ping(ctx context.Context, in *Request) (*Response, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Ping(ctx, in)
}

func (m *defaultUser) Register(ctx context.Context, in *RegisterReq) (*RegistreResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Register(ctx, in)
}

func (m *defaultUser) Login(ctx context.Context, in *LoginReq) (*LoginResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in)
}

func (m *defaultUser) GetUserInfo(ctx context.Context, in *GetUserInfoReq) (*GetUserInfoResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetUserInfo(ctx, in)
}
